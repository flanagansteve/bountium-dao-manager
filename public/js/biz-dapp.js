// TODO products don't always come back in the right order - minor issue,
// fixed any reprecussions. just aesthetic now.
// TODO allow owners to set their name in OO
// TODO implement supply step descriptions both here in adding supply step,
// and in contract's addSupplyStep
// TODO replace all "get next order/step" with async fetching
// TODO add more details to display in customer view of store:
  // info about how it is being assured for delivery (ie, guarantees)
  // info about store - their history, reviews, etc
// TODO guide biz owners on assessor setup:
  // using public incents (incorporate registrar contract):
    // level 0: suggest most popular incents
    // level 1: suggest incents based on product key words
  // guide them on deploying their own incent
// TODO cache a user's business address so that they don't have to re-enter it
// TODO darken rest of screen on popups
// TODO move all events listening for catalogue mods to one listener in the
// catalogue overview rather than within each func call

var autobizABI = web3.eth.contract([{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"owners","outputs":[{"name":"name","type":"string"},{"name":"stake","type":"uint256"},{"name":"callsDividend","type":"bool"},{"name":"canDilute","type":"bool"},{"name":"canBestow","type":"bool"},{"name":"canModifyCatalogue","type":"bool"},{"name":"board","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"product","type":"uint256"},{"name":"orderID","type":"uint256"}],"name":"checkOrderStatus","outputs":[{"name":"stepsCompleted","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"biz_name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"catalogue","outputs":[{"name":"name","type":"string"},{"name":"description","type":"string"},{"name":"imageURL","type":"string"},{"name":"forSale","type":"bool"},{"name":"price","type":"uint256"},{"name":"ordersReceived","type":"uint256"},{"name":"supplyChainLength","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"amt","type":"uint256"}],"name":"payDividend","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"supplyChains","outputs":[{"name":"description","type":"string"},{"name":"incentiviser","type":"address"},{"name":"fee","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"evaluator","type":"address"},{"name":"fee","type":"uint256"}],"name":"addSupplyStep","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"orderID","type":"uint256"}],"name":"paySuppliersForOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalShares","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"equityTaken","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"bestowee","type":"address"},{"name":"which","type":"uint256"}],"name":"bestowPermission","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"sharesToTransfer","type":"uint256"},{"name":"recipient","type":"address"}],"name":"transferShares","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"b32","type":"bytes32"}],"name":"bytes32ToBytes","outputs":[{"name":"b","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"step","type":"uint256"}],"name":"paySupplier","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"shares","type":"uint256"},{"name":"recipient","type":"address"}],"name":"giveUnallocatedShares","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"}],"name":"listProduct","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"x","type":"uint256"}],"name":"uintToBytes","outputs":[{"name":"b","type":"bytes"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"newPrice","type":"uint256"}],"name":"changePrice","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"description_","type":"string"}],"name":"addDescription","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"name":"orders","outputs":[{"name":"complete","type":"bool"},{"name":"suppliersPaid","type":"bool"},{"name":"customerData","type":"string"},{"name":"stepsCompleted","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"},{"name":"price","type":"uint256"}],"name":"releaseProduct","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"imageURL_","type":"string"}],"name":"addImageUrl","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"name_","type":"string"}],"name":"setMyName","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"},{"name":"customerInfo","type":"string"}],"name":"order","outputs":[{"name":"orderPlaced","type":"bool"},{"name":"delivered","type":"address"},{"name":"orderID","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"ownersRegistered","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"source","type":"string"}],"name":"stringToBytes","outputs":[{"name":"result","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"stake","type":"uint256"},{"name":"recipient","type":"address"}],"name":"dilute","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"product","type":"uint256"}],"name":"delistProduct","outputs":[{"name":"success","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"equityToSender","type":"uint256"},{"name":"_totalShares","type":"uint256"},{"name":"_name","type":"string"}],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"byWhom","type":"address"}],"name":"OwnershipModified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"byWhom","type":"address"},{"indexed":false,"name":"productID","type":"uint256"}],"name":"ProductReleased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"byWhom","type":"address"},{"indexed":false,"name":"productID","type":"uint256"}],"name":"ProductModified","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"productID","type":"uint256"},{"indexed":false,"name":"orderID","type":"uint256"}],"name":"OrderReceived","type":"event"}]);

autobizData = '';

autobizAddr = null;

autobiz = null;

// Example string-based bounty market at: 0x54a93a193babd89c46ef4f12f7f550a0e1cdc95d
// Example num-based bounty market at: 0x64d083eb98f69555ce813fa2528735e9d09f990a

window.addEventListener('load', async () => {

  document.getElementById("dashboard").innerHTML = "<h1>Bountium is a dapp built on the Ethereum blockchain. You need an Ethereum wallet to use it - we recommend metamask, which you can install <a href = \'https://metamask.io\'>here</a></h1>";

  // check for metamask
  if(typeof web3 !== 'undefined') {
    await ethereum.enable();
    web3 = new Web3(web3.currentProvider);
  } else {
    web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  }
  try {
    userAccount = web3.eth.accounts[0];
    updateInterface();
    var accountInterval = setInterval(function() {
      if (web3.eth.accounts[0] !== userAccount) {
        userAccount = web3.eth.accounts[0];
        updateInterface();
      }
    }, 100);
  } catch (e) {
    console.error(e);
  }
});

function updateInterface() {
  document.getElementById("workflow-container").innerHTML = "";
  var addr = location.search;
  if (addr.includes("0x")) {
    autobizAddr = addr.substring(addr.indexOf("0x"));
    // presuming its a valid autobiz addr... TODO
    autobiz = autobizABI.at(autobizAddr);
    renderDashboard();
  } else {
    ReactDOM.render(
      React.createElement(Welcome, null, userAccount),
      document.getElementById("dashboard")
    );
  }
}

var Welcome = React.createClass({

  newBiz : function() {
    newBizWorkflow();
  },

  renderDashboard : function () {
    autobizAddr = document.getElementById("autobiz-addr-input").value;
    autobiz = autobizABI.at(autobizAddr);
    renderDashboard();
  },

  render : function() {
    var br = React.createElement("br", {});
    return React.createElement("div", {className:"welcome"},
      React.createElement("h1", {}, "Welcome!"),
      React.createElement("div", {className:"autobiz-addr-form"},
        React.createElement("h4", {}, "Manage my Bountium-powered business"),
        React.createElement("input", {type:"text", id:"autobiz-addr-input", placeholder:"Your Autobiz's address"}),
        br, br,
        React.createElement("button", {id:"autobiz-addr-input-btn", onClick:this.renderDashboard}, "Go!")
      ),
      React.createElement("div", {className:"new-autobiz-form"},
        React.createElement("h4", {}, "Start a Bountium-powered Business"),
        React.createElement("button", {id:"new-biz-btn", onClick:this.newBiz}, "Go!")
      ),
      // TODO
      React.createElement("div", {className:"new-autobiz-form"},
        React.createElement("h4", {}, "Supercharge my existing business with Bountium"),
        React.createElement("button", {id:"new-biz-btn", onClick:function() { alert('coming soon!')}}, "Go!")
      )
    )
  }
})

function newBizWorkflow() {
  if (alertXed)
    document.getElementById("workflow-container").innerHTML = "";
  ReactDOM.render(
    React.createElement(NewBizWorkflow, {}),
    document.getElementById("workflow-container")
  );
}

var NewBizWorkflow = React.createClass({

  getInitialState : function() {
    return {
      xed:false
    }
  },

  x : function() {
    this.setState({xed:true});
    alertXed = true;
  },

  deploy : function() {
    web3.eth.estimateGas(
      {
        data: autobizABI.new.getData(
          document.getElementById("equity-to-sender-input").value,
          document.getElementById("total-shares-input").value,
          document.getElementById("new-biz-name-input").value,
          {data: autobizData}
        )
      },
      (err, res) => {
        autobizABI.new(
          document.getElementById("equity-to-sender-input").value,
          document.getElementById("total-shares-input").value,
          document.getElementById("new-biz-name-input").value,
          {
            from: userAccount,
            data: autobizData,
            gas: Math.floor(res * 1.05)
          },
          (err, res) => {
            if (err)
              console.error(err)
            if (typeof res.address !== 'undefined') {
              alert("Success! Your business has been deployed to: " + res.address);
              autobizAddr = res.address;
              autobiz = autobizABI.at(res.address);
              this.x();
              renderDashboard();
            } else {
              alert("Your business's contract is being deployed to the blockchain - please be patient")
            }
          }
        );
      }
    )
  },

  render : function() {
    if (this.state.xed)
      return React.createElement("div", {});
    var br = React.createElement("br", {})
    var xout = React.createElement("button", {onClick:this.x, className:"popup-x-btn"}, "X");
    var header = React.createElement("h3", {}, "Deploy a new business");
    var newBizDetails = React.createElement("div", {className:"new-biz-details"},
      React.createElement("label", {for:"new-biz-name-input"}, "Name your new business"),
      // TODO pull funny suggestions from somewhere
      React.createElement("input", {type:"text", id:"new-biz-name-input", placeholder:"Steve's Bacon Emporium, Inc"}),
      br,
      React.createElement("label", {for:"equity-to-sender-input"}, "Equity for yourself - leftover shares remain free"),
      React.createElement("input", {type:"number", id:"equity-to-sender-input"}),
      br,
      React.createElement("label", {for:"total-shares-input"}, "Total shares available for equity"),
      React.createElement("input", {type:"number", id:"total-shares-input"})
    );
    return React.createElement("div", {className:"popup"}, xout, header,
      newBizDetails,
      React.createElement("button", {onClick:this.deploy, className:"deploy-biz"}, "Deploy business")
    );
  }
});

function renderDashboard() {
  autobiz.isOwner(userAccount, function(err, res) {
    if (res) {
      document.getElementById("dashboard").innerHTML = "";
      ReactDOM.render(
        React.createElement(Dashboard, null, userAccount),
        document.getElementById("dashboard")
      );
    } else {
      renderNotOwnerError();
    }
  });
}

var Dashboard = React.createClass({

  getInitialState : function() {
    // TODO this renders before these calls run - how to fix?
    var name_ = "your business"
    var owner_ = "Business Owner"
    autobiz.biz_name((err, res) => {
      if (res)
        name_ = res;
    });
    autobiz.owners(userAccount, (err, res) => {
      if (res[0] != "")
        owner_ = res[0];
    });
    return {
      view : true,
      name : name_,
      owner : owner_
    }
  },

  switchView : function() {
    currentView = this.state.view;
    this.setState({view:!currentView});
  },

  render : function() {
    var logo;// = React.createElement("img", {src:"./img/logo.png", href:"./index.html"});
    var welcome = React.createElement("div", null,
      React.createElement("h2", null, "Welcome, " + this.state.owner),
      React.createElement("h3", null, "Here's how " + this.state.name + " is doing today.")
    );
    var co = React.createElement(CatalogueOverview, null);
    var oo = React.createElement(OrgOverview, null);
    var so = React.createElement(StoreOverview, null);
    if (this.state.view)
      return React.createElement("div", null, logo, welcome,
        React.createElement("button", {className:"view-switch",onClick:this.switchView}, "View My Store")
      , React.createElement("div", {className:"my-business"}, co, oo));
    return React.createElement("div", null, logo, welcome,
      React.createElement("button", {className:"view-switch",onClick:this.switchView}, "View My Business")
    , React.createElement("div", {className:"my-business"}, so))
  }

});

var CatalogueOverview = React.createClass({

  getInitialState : function() {
    var catalogue = [];
    // upper lim on how many products to fetch
    var maxProducts = 100;
    for (let i = 0; i < maxProducts; i++) {
      autobiz.catalogue(i, (err, res) => {
        if (err) {
          if(err.message.includes("not a base 16")) {
            // TODO why doesn't this break the loop
            maxProducts = i;
            //console.log("finished getting catalogue at: " + i);
          } else {
            console.error(err)
          }
        } else {
          // Assumes no one is intentionally naming a product ""
          if (res[0] != "") {
            catalogue.push({
              id : i,
              name : res[0],
              description : res[1],
              imageUrl : res[2],
              forSale : res[3],
              price : res[4],
              ordersReceived : res[5],
              supplyChainLength : res[6]
            });
          } else {
            return {
              expanded : false,
              catalogue : catalogue
            }
          }
        }
      });
    }
    // TODO re-order catalogue by product.id
    return {
      expanded : false,
      catalogue : catalogue
    }
  },

  expand : function() {
    this.setState({expanded:true});
  },

  refreshCatalogue : function() {
    var catalogue = [];
    // upper lim on how many products to fetch
    var maxProducts = 100;
    for (let i = 0; i < maxProducts; i++) {
      autobiz.catalogue(i, (err, res) => {
        if (err) {
          if(err.message.includes("not a base 16")) {
            // TODO why doesn't this break the loop
            maxProducts = i;
            //console.log("finished getting catalogue at: " + i);
          } else {
            console.error(err)
          }
        } else {
          // Assumes no one is intentionally naming a product ""
          if (res[0] != "") {
            catalogue.push({
              id : i,
              name : res[0],
              description : res[1],
              imageUrl : res[2],
              forSale : res[3],
              price : res[4],
              ordersReceived : res[5],
              supplyChainLength : res[6]
            });
          } else {
            this.setState({catalogue:catalogue});
            this.setState({expanded:false});
            return;
          }
        }
      });
    }
    this.setState({catalogue:catalogue});
    this.setState({expanded:false});
  },

  collapse : function() {
    this.setState({expanded:false});
  },

  showProductOverview : function(product, func) {
    showProductOverview(product, func)
  },

  mapCatalogue : function(product, key) {
    return React.createElement("div", {className:"product-card", onClick:() => this.showProductOverview(product, this.refreshCatalogue), key:key},
      React.createElement("h5", {}, product.name),
      React.createElement("p", {}, "Price: " + product.price + " wei"),
      React.createElement("p", {}, "" + product.ordersReceived + " orders received"),
      React.createElement("p", {}, "For Sale: " + product.forSale)
    );
  },

  newProduct : function() {
    newProductWorkflow(this.state.catalogue.length, this.refreshCatalogue)
  },

  render : function() {
    if (this.state.expanded)
      return React.createElement("div", {className:"catalogue-feed"},
        React.createElement("h3", null, "Products and Sales"),
        React.createElement("button", {className:"toggle-expand-collapse", onClick:this.collapse}, "-"),
        this.state.catalogue.map(this.mapCatalogue),
        // New product button
        React.createElement("div", {
            className:"product-card",
            id:"new-product-btn",
            onClick:this.newProduct
          },
          React.createElement("h5", {}, "New Product"),
          React.createElement("h5", {}, "+")
        )
      );
    return React.createElement("div", {className:"catalogue-feed"},
      React.createElement("h3", null, "Products and Sales"),
      React.createElement("button", {className:"toggle-expand-collapse", onClick:this.expand}, "+")
    );
  }

});

var alertXed = false;

function showProductOverview(product, func) {
  if (alertXed)
    document.getElementById("workflow-container").innerHTML = "";
  ReactDOM.render(
    React.createElement(ProductOverview,
      {
        refreshCatalogue:func,
        price:product.price,
        description:product.description,
        imageUrl:product.imageUrl,
        productID:product.id,
        ordersReceived:product.ordersReceived,
        supplyChainLength:product.supplyChainLength,
        forSale:product.forSale
      },
      product.name
    ),
    document.getElementById("workflow-container")
  );
}

// TODO on all product state mods, call updateCatalogue() in catalogue react obj
// TODO check for success on each state mod, rather than blindly assuring user
var ProductOverview = React.createClass({

  // TODO show users info abt assesor contracts in the supply chain
  getInitialState : function() {
    return {
      xed:false,
      id:this.props.productID,
      orders:[],
      supplyChain:[]
    }
  },

  x : function() {
    this.setState({xed:true});
    alertXed = true;
  },

  // fetch orders in order of recency, ie, descending order
  anotherOrder : function() {
    // TODO why do we have to click this twice
    var ordersArr = this.state.orders;
    autobiz.orders(this.state.id, this.props.ordersReceived - ordersArr.length - 1, (err, res) => {
      if (res)
        ordersArr.push({
          id : this.props.ordersReceived - ordersArr.length - 1,
          status : res[0],
          paidOut : res[1],
          customerData : res[2]
          // TODO how to represent the array of supply bounties here? a link to it maybe?
        })
    })
    this.setState({orders:ordersArr});
  },

  mapOrders : function(order, key) {
    return React.createElement("tr", {key:key},
      React.createElement("td", {}, "" + order.id),
      React.createElement("td", {}, "" + order.customerData),
      React.createElement("td", {}, "" + order.status),
      React.createElement("td", {},
        React.createElement("button", {onClick:() => this.paySupplier(order.id)}, "Pay")
      )
    )
  },

  paySupplier : function(orderID) {
    autobiz.paySuppliersForOrder(this.state.id, orderID, function(e, r) {
      if(e)
        console.error(e);
      else
        alert("Request sent to contract");
    });
  },

  // fetch supply step in increasing order
  anotherStep : function() {
    // TODO why do we have to click this twice
    var supplyChainArr = this.state.supplyChain;
    autobiz.supplyChains(this.state.id, supplyChainArr.length, (err, res) => {
      if (res)
        supplyChainArr.push({
          description : "Description: " + res[0],
          incentAddress : res[1],
          fee : res[2]
        })
    })
    this.setState({supplyChain:supplyChainArr});
  },

  mapSteps : function(step, key) {
    return React.createElement("tr", {key:key},
      React.createElement("td", {}, key),
      React.createElement("td", {}, step.description),
      React.createElement("td", {}, step.incentAddress),
      React.createElement("td", {}, "" + step.fee)
    )
  },

  addSupplyStep : function() {
    autobiz.addSupplyStep(
      this.props.productID,
      document.getElementById("new-supply-step-addr-input").value,
      document.getElementById("new-supply-step-fee-input").value,
      (err, res) => {
        if (err)
          console.error(err)
        else {
          alert("Request to add this step is on its way!");
          var confirmMod = autobiz.ProductModified((err, res) => {
            if (err)
              console.error(err);
            else
              alert("Successfully added supply step");
              this.props.refreshCatalogue();
              this.x();
          });
        }
      }
    );
  },

  list : function() {
    autobiz.listProduct(this.props.productID, (err, res) => {
      if (err)
        console.error(err)
      else {
        alert("Request to list this product is on its way!");
        var confirmMod = autobiz.ProductModified((err, res) => {
          if (err)
            console.error(err);
          else
            alert("Successfully listed this product");
            this.props.refreshCatalogue();
            this.x();
        })
      }
    });
  },

  delist : function() {
    autobiz.delistProduct(this.props.productID, (err, res) => {
      if (err)
        console.error(err)
      else {
        alert("Request to delist this product is on its way!");
        var confirmMod = autobiz.ProductModified((err, res) => {
          if (err)
            console.error(err);
          else
            alert("Successfully delisted this product");
            this.props.refreshCatalogue();
            this.x();
        })
      }
    });
  },

  changePrice : function() {
    autobiz.changePrice(this.props.productID, document.getElementById("change-price-input").value, (err, res) => {
      if (err)
        console.error(err)
      else {
        alert("Request to change price is on its way!");
        var confirmMod = autobiz.ProductModified((err, res) => {
          if (err)
            console.error(err);
          else
            alert("Successfully changed price");
            this.props.refreshCatalogue();
            this.x();
        })
      }
    });
  },

  addDescription : function() {
    autobiz.addDescription(this.props.productID, document.getElementById("add-description-input").value, (err, res) => {
      if (err)
        console.error(err)
      else {
        alert("Request to update description is on its way!");
        var confirmMod = autobiz.ProductModified((err, res) => {
          if (err)
            console.error(err);
          else
            alert("Successfully updated description");
            this.props.refreshCatalogue();
            this.x();
        })
      }
    });
  },

  addImageUrl : function() {
    // TODO check that the provided url is indeed an img, perhaps look at file type?
    autobiz.addImageUrl(this.props.productID, document.getElementById("add-image-url-input").value, (err, res) => {
      if (err)
        console.error(err)
      else {
        alert("Request to update image url is on its way");
        var confirmMod = autobiz.ProductModified((err, res) => {
          if (err)
            console.error(err);
          else
            alert("Successfully updated image url");
            this.props.refreshCatalogue();
            this.x();
        })
      }
    });
  },

  guideIncentivisers : function() {
    // TODO make this one day suggest popular incentivsiers and let people discover
    // some by keyword
    alert("An incentiviser is the contract to which your business will place bounties for steps in its supply chain. The incentiviser contract is what ensures the supply chain is completed properly - so it is very important to choose carefully! If you'd like an example incentiviser contract, try this one: 0x54a93a193babd89c46ef4f12f7f550a0e1cdc95d. It will reward any response given to it :)");
  },

  render : function() {
    if (this.state.xed)
      return React.createElement("div", {});
    var br = React.createElement("br", {})
    var xout = React.createElement("button", {onClick:this.x, className:"popup-x-btn"}, "X");
    var header = React.createElement("h3", {}, this.props.children);
    var currentProductDetails = React.createElement("div", {className:"current-product-details"},
      React.createElement("img", {src:this.props.imageUrl}),
      React.createElement("p", {}, "Price: " + this.props.price),
      React.createElement("p", {}, "Orders Received: " + this.props.ordersReceived),
      React.createElement("p", {}, "For Sale: " + this.props.forSale),
      React.createElement("p", {}, "Description: " + this.props.description)
    );
    var nextStepButton = React.createElement("p", {className:"all-x-displayed", id:"all-steps-received-note"}, "All steps displayed");
    if (this.props.supplyChainLength - this.state.supplyChain.length > 0)
      nextStepButton = React.createElement("button", {onClick:this.anotherStep}, "Get next step in the supply chain");
    var nextOrderBtn = React.createElement("p", {className:"all-x-displayed", id:"all-orders-received-note"}, "All orders displayed");
    if (this.props.ordersReceived - this.state.orders.length > 0)
      nextOrderBtn = React.createElement("button", {onClick:this.anotherOrder}, "Get next order from contract");
    // TODO only show these ones if user.canModifyCatalogue
    var newSupplyStepForm = React.createElement("div", {className:"product-actions-form", id:"add-supply-step-product-actions-form"},
      React.createElement("h6", {}, "Add a supply step to this product's supply chain"),
      React.createElement("a", {href:"#", id:"incentiviser-guide-click", onClick:this.guideIncentivisers}, "(Help me pick an incentiviser!)"),
      React.createElement("label", {for:"new-supply-step-addr-input"}, "Address of incentiviser for this supply step"),
      React.createElement("input", {type:"text", id:"new-supply-step-addr-input", placeholder:"0x123..."}),
      br,
      React.createElement("label", {for:"change-price-input"}, "Fee your business will pay for this step"),
      React.createElement("input", {type:"number", id:"new-supply-step-fee-input"}),
      br,
      React.createElement("button", {onClick:this.addSupplyStep, className:"product-mod-btn"}, "Add supply step")
    );
    var changePriceForm = React.createElement("div", {className:"product-actions-form"},
      React.createElement("label", {for:"change-price-input"}, "Change the price of this product"),
      React.createElement("input", {type:"number", id:"change-price-input"}),
      br,
      React.createElement("button", {onClick:this.changePrice, className:"product-mod-btn"}, "Change price")
    );
    var changeDescriptForm = React.createElement("div", {className:"product-actions-form"},
      React.createElement("label", {for:"add-description-input"}, "Update the description of this product"),
      React.createElement("input", {type:"text", placeholder:"Product details and assurances go here!", id:"add-description-input"}),
      br,
      React.createElement("button", {onClick:this.addDescription, className:"product-mod-btn"}, "Update description")
    );
    var changeImageUrlForm = React.createElement("div", {className:"product-actions-form"},
      React.createElement("label", {for:"add-image-url-input"}, "Update the image of this product"),
      React.createElement("input", {type:"text", placeholder:"Upload it to a host like imgur or IPFS", id:"add-image-url-input"}),
      br,
      React.createElement("button", {onClick:this.addImageUrl, className:"product-mod-btn"}, "Update image url")
    );
    var listDelist = React.createElement("button", {onClick:this.list, className:"product-mod-btn"}, "List product");
    if (this.props.forSale)
      listDelist = React.createElement("button", {onClick:this.delist, className:"product-mod-btn"}, "Delist product");
    return React.createElement("div", {className:"popup-product-ov"},
      xout, header, currentProductDetails,
      React.createElement("h3", {}, "Supply chain steps:"),
      React.createElement("table", {className:"new-product-supply-steps"},
        React.createElement("tbody", {},
          React.createElement("tr", {},
            React.createElement("th", {}, "Step #"),
            React.createElement("th", {}, "Description"),
            React.createElement("th", {}, "Incentiviser Address"),
            React.createElement("th", {}, "Fee")
          ),
          this.state.supplyChain.map(this.mapSteps)
        )
      ),
      nextStepButton,
      React.createElement("h3", {}, "Orders received:"),
      React.createElement("table", {className:"new-product-supply-steps"},
        React.createElement("tbody", {},
          React.createElement("tr", {},
            React.createElement("th", {}, "Order ID"),
            React.createElement("th", {}, "Customer Data"),
            React.createElement("th", {}, "Completed?"),
            React.createElement("th", {}, "Pay Suppliers")
          ),
          this.state.orders.map(this.mapOrders)
        )
      ),
      nextOrderBtn,
      newSupplyStepForm, br,
      changePriceForm, br,
      changeDescriptForm, br,
      changeImageUrlForm, br,
      listDelist
    );
  }
})

function newProductWorkflow(newID, func) {
  if (alertXed)
    document.getElementById("workflow-container").innerHTML = "";
  ReactDOM.render(
    React.createElement(NewProductWorkflow, {newID:newID, refreshCatalogue:func}),
    document.getElementById("workflow-container")
  );
}

var NewProductWorkflow = React.createClass({
  getInitialState : function() {
    return {
      xed:false,
      supplySteps:[]
    }
  },

  x : function() {
    this.setState({xed:true});
    alertXed = true;
  },

  mapInputtedSteps : function (step, key) {
    return React.createElement("tr", {key:key},
      React.createElement("td", {}, key),
      React.createElement("td", {}, step.assessorAddr),
      React.createElement("td", {}, step.fee)
    )
  },

  addStep : function() {
    var supplyStepsArr = this.state.supplySteps;
    supplyStepsArr.push({
      assessorAddr:document.getElementById("new-step-assessor-addr").value,
      fee:document.getElementById("new-step-fee").value
    });
    this.setState({supplySteps:supplyStepsArr});
  },

  guideIncentivisers : function() {
    // TODO make this one day suggest popular incentivsiers and let people discover
    // some by keyword
    alert("An incentiviser is the contract to which your business will place bounties for steps in its supply chain. The incentiviser contract is what ensures the supply chain is completed properly - so it is very important to choose carefully! If you'd like an example incentiviser contract, try this one: 0x54a93a193babd89c46ef4f12f7f550a0e1cdc95d. It will reward any response given to it :)");
  },

  deploy : function() {
    // Deploying means:
      // 1. autobiz.releaseProduct(name, price)
      // 2. autobiz.addSupplyStep() for each in table
      // 3. if (checkbox) autobiz.listProduct()
    autobiz.releaseProduct(
      document.getElementById("new-product-name").value,
      document.getElementById("new-product-price").value,
      (err, res) => {
        if (err)
          console.error(err)
        if (typeof res !== 'undefined') {
          alert("Your product is being sent to the contract now.");
          // Note: the new product's productID should be equal to the number of products in the catalogue
          var productReleased = autobiz.ProductReleased((err, res) => {
            // ignoring errors for now
            // if tx was confirmed:
            if (res) {
              // confirmed, so batch all the product mods and send as tx
              if (this.state.supplySteps.length > 0 || document.getElementById("new-product-list").checked || document.getElementById("new-product-description").value || document.getElementById("new-product-image-url").value) {
                // alert success
                alert("Your product has been received by the contract - sending initial configurations now");
                var productMods = web3.createBatch();
                for (let i = 0; i < this.state.supplySteps.length; i++)
                  productMods.add(
                    autobiz.addSupplyStep(this.props.newID,
                      this.state.supplySteps[i].assessorAddr,
                      this.state.supplySteps[i].fee,
                      (err_supply_step, res_supply_step) => {
                        if (err_supply_step)
                          console.error(err_supply_step)
                      }
                    )
                  );
                if(document.getElementById("new-product-list").checked)
                  productMods.add(
                    autobiz.listProduct(this.props.newID, (err_listing, res_listing) => {
                      if (err_listing)
                        console.error(err_listing);
                    })
                  );
                if(document.getElementById("new-product-description").value != "")
                  productMods.add(
                    autobiz.addDescription(this.props.newID, document.getElementById("new-product-description").value, (err_adding_description, res_adding_description) => {
                      if (err_adding_description)
                        console.error(err_adding_description);
                    })
                  );
                if(document.getElementById("new-product-image-url").value != "")
                  productMods.add(
                    autobiz.addImageUrl(this.props.newID, document.getElementById("new-product-image-url").value, (err_adding_img, res_adding_img) => {
                      if (err_adding_img)
                        console.error(err_adding_img);
                    })
                  );
                var settingsInitialised = autobiz.ProductModified((err_listener, res_listener) => {
                  if (err_listener)
                    console.error(err_listener)
                  else if (res_listener) {
                    // TODO why don't this exec
                    alert('Success! Your product has been released with its initialised settings.')
                    this.props.refreshCatalogue();
                    this.x();
                  }
                });
                productMods.execute();
              }
              else {
                // confirmed, no more to do
                alert('Success! Your product has been released.')
                this.props.refreshCatalogue();
                this.x();
              }
            }
            // otherwise, unconfirmed or can't access confirmation
            else {
              alert("We weren't able to confirm the tx, and therefore weren't able to automatically set your initialised supply chain and listing preference - Once Metamask confirms the tx, refresh, then click on the product's card in the catalogue to do so manually")
              this.x();
            }
          });
        }
      }
    )
  },

  render : function() {
    if (this.state.xed)
      return React.createElement("div", {});
    var br = React.createElement("br", {})
    var xout = React.createElement("button", {onClick:this.x, className:"popup-x-btn"}, "X");
    var header = React.createElement("h3", {}, "Release a new product");
    var newProductDetails = React.createElement("div", {className:"new-product-details"},
      React.createElement("label", {for:"new-product-name"}, "Name the new product"),
      // TODO pull funny name suggestions from somewhere
      React.createElement("input", {type:"text", id:"new-product-name", placeholder:"Baconator 5000!"}),
      br,
      React.createElement("label", {for:"new-product-price"}, "Price, in wei"),
      React.createElement("input", {type:"number", id:"new-product-price"})
    );
    var newStepInput = React.createElement("div", {className:"product-actions-form"},
      React.createElement("h5", {}, "Add a new step:"),
      React.createElement("a", {href:"#", id:"incentiviser-guide-click", onClick:this.guideIncentivisers}, "(Help me pick an incentiviser!)"),
      React.createElement("label", {for:"new-step-assessor-addr"}, "Address of incentiviser for this step: "),
      React.createElement("input", {type:"text", id:"new-step-assessor-addr", placeholder:"Address of incentiviser for this supply step"}),
      br,
      React.createElement("label", {for:"new-step-fee"}, "Amount to pay for this step:"),
      React.createElement("input", {type:"number", id:"new-step-fee"}),
      br,
      React.createElement("button", {onClick:this.addStep, className:"product-mod-btn"}, "Add step")
    );
    var changeDescriptForm = React.createElement("div", {className:"product-actions-form"},
      React.createElement("label", {for:"new-product-description"}, "Add a description of this product"),
      React.createElement("input", {type:"text", placeholder:"Product details and assurances go here!", id:"new-product-description"}),
    );
    var changeImageUrlForm = React.createElement("div", {className:"product-actions-form"},
      React.createElement("label", {for:"new-product-image-url"}, "Add an image for this product"),
      React.createElement("input", {type:"text", placeholder:"Upload it to a host like imgur or IPFS", id:"new-product-image-url"}),
    );
    var deploy = React.createElement("button", {onClick:this.deploy, className:"deploy-product"}, "Deploy product");
    return React.createElement("div", {className:"popup"}, xout, header,
      newProductDetails,
      React.createElement("h5", {id:"option-header"}, "Optional initalised configurations:"),
      changeDescriptForm,
      changeImageUrlForm,
      React.createElement("h3", {}, "Steps in supply chain:"),
      React.createElement("table", {className:"new-product-supply-steps"},
        React.createElement("tbody", {},
          React.createElement("tr", {},
            React.createElement("th", {}, "Step #"),
            React.createElement("th", {}, "Assessor Address"),
            React.createElement("th", {}, "Fee")
          ),
          this.state.supplySteps.map(this.mapInputtedSteps)
        )
      ),
      newStepInput, br,
      React.createElement("div", {},
        React.createElement("label", {for:"new-product-list"}, "List immediately"),
        React.createElement("input", {type:"checkbox", id:"new-product-list"})
      ), deploy
    );
  }
});

var StoreOverview = React.createClass({

  getInitialState : function() {
    var bizName_ = "anonymous business";
    autobiz.biz_name(function(err, res) {
      if (res!="")
        bizName_ = res;
    });
    var orderReceived = autobiz.OrderReceived((err, res) => {
      if (err)
        console.error(err)
      if (typeof res.args.productID !== 'undefined')
        alert("Success! Your order has been confirmed for product with ID: " + res.args.productID + " with orderID " + res.args.orderID + ". Save these somewhere in order to check your order's status later.");
    });
    var catalogue = [];
    // upper lim on how many products to fetch
    var maxProducts = 100;
    for (let i = 0; i < maxProducts; i++) {
      autobiz.catalogue(i, (err, res) => {
        if (err) {
          if(err.message.includes("not a base 16")) {
            return {
              expanded : false,
              catalogue : catalogue,
              bizName : bizName_
            }
          } else {
            console.error(err)
          }
        } else {
          // Assumes no one is intentionally naming a product ""
          if (res[0] != "") {
            if (res[3])
              catalogue.push({
                name : res[0],
                description : res[1],
                imageUrl : res[2],
                forSale : res[3],
                price : res[4],
                ordersReceived : res[5],
                supplyChainLength : res[6]
              });
          } else {
            return {
              expanded : false,
              catalogue : catalogue,
              bizName : bizName_
            }
          }
        }
      });
    }
    return {
      expanded : false,
      catalogue : catalogue,
      bizName : bizName_
    }
  },

  expand : function() {
    this.setState({expanded:true});
  },

  collapse : function() {
    this.setState({expanded:false});
  },

  order : function(productID) {
    autobiz.order(productID, document.getElementById("customer-info-input-" + productID).value,
      {from:userAccount, value:this.state.catalogue[productID].price},
      function(err, res) {
        if (err) {
          console.error(err)
        } else {
          // TODO why don't this run on tx confirm :(((
          alert("Your order has been sent and is awaiting confirmation");
        }
      }
    );
  },

  mapCatalogue : function(product, key) {
    return React.createElement("div", {className:"product-card", key:key},
      React.createElement("h5", {}, product.name),
      React.createElement("img", {className:"product-card-img", src:product.imageUrl}),
      React.createElement("p", {}, product.description),
      React.createElement("p", {}, "Price: " + product.price + " wei"),
      React.createElement("label", {for:"customer-info-input-" + key}, "Input your delivery information"),
      React.createElement("input", {type:"text", id:"customer-info-input-" + key, placeholder:"A email or physical address, most likely"}),
      React.createElement("button", {className:"order-btn", onClick:() => this.order(key)}, "Order")
    );
  },

  lookupOrder : function() {
    autobiz.checkOrderStatus(
      document.getElementById("product-id-input").value,
      document.getElementById("order-id-input").value,
      function(err, res) {
        if (err)
          console.error(err)
        else
          // TODO way to let owner make note of progress? or have autobiz auto-mark
          // steps in the supply chain as completed, so we can say "3/5 steps done"
          // or "in delivery" for example?
          autobiz.catalogue(document.getElementById("product-id-input").value,
            function(err1, res1) {
              if (err1)
                console.error(err1);
              else {
                if (res1[6] == res)
                  alert("Your order has been completed");
                else if (res1[6] == res + 1)
                  alert("Your order is manufactured, and being delivered to you!");
                else
                  alert(res + " out of " + res1[6] + " steps have been finished in completing your order");
              }
            }
          );
      }
    );
  },

  render : function() {
    var link = location.href;
    if (!link.includes(autobizAddr))
      if (link.includes("?0x"))
        link = link.substring(0, link.indexOf("?")) + "?" + autobizAddr;
      else
        link += "?" + autobizAddr;
    link = link.replace("biz", "shop");
    var howToShare = React.createElement("div", {className:"how-to-share"},
      React.createElement("p", {}, "Here's the link to your store for customers to buy from:"),
      React.createElement("p", {},
        React.createElement("a", {href:link}, link)
      )
    );
    var catalogueList = React.createElement("p", {}, "This business has not listed any products for sale!");
    var orderChecker = React.createElement("div", {className:"order-checker"},
      React.createElement("h4", {}, "Check an order's status"),
      React.createElement("label", {for:"product-id-input"}, "Input the product and order id"),
      React.createElement("input", {type:"number", id:"product-id-input"}),
      React.createElement("input", {type:"number", id:"order-id-input"}),
      React.createElement("button", {onClick:this.lookupOrder}, "Lookup")
    );
    if (this.state.catalogue.length >= 0)
      catalogueList = this.state.catalogue.map(this.mapCatalogue);
    if (this.state.expanded)
      return React.createElement("div", {className:"store-overview"}, howToShare,
        React.createElement("div", {className:"catalogue-feed"},
          React.createElement("h3", null, "Welcome to the store of: " + this.state.bizName),
          orderChecker, React.createElement("br", {}),
          React.createElement("h3", null, "Products Available"),
          React.createElement("button", {className:"toggle-expand-collapse", onClick:this.collapse}, "-"),
          catalogueList
        )
      );
    return React.createElement("div", {className:"store-overview"}, howToShare,
      React.createElement("div", {className:"catalogue-feed"},
        React.createElement("h3", null, "Welcome to the store of: " + this.state.bizName),
        orderChecker, React.createElement("br", {}),
        React.createElement("h3", null, "Products Available"),
        React.createElement("button", {className:"toggle-expand-collapse", onClick:this.expand}, "+")
      )
    );
  }

});

var OrgOverview = React.createClass({

  getInitialState : function() {
    var modListener = autobiz.OwnershipModified((err, res) => {
      if (res) {
        // TODO this presumes other owners won't modify the org while this user is online
        alert("Ownership changes confirmed.");
        this.refreshOrg();
      }
    })
    var owners_ = [];
    // TODO how to get total number of owners?? presuming ten. perhaps a button
    // to get ten at a time?
    var maxOwners = 10;
    // TODO can i speed this up? delays load.
    for (let i = 0; i < maxOwners; i++)
      autobiz.ownersRegistered(i, (err, res) => {
        if (err)
          if(err.message.includes("not a base 16"))
            // break
            return {
              shares : 0,
              totalShares : 0,
              dividend : false,
              dilute : false,
              bestow : false,
              modifyCatalogue : false,
              board : false,
              owners : owners_,
              expanded : false,
              orgFunds : 0
            }
          else
            console.error(err);
        owners_.push(res);
      });
    return {
      shares : 0,
      totalShares : 0,
      dividend : false,
      dilute : false,
      bestow : false,
      modifyCatalogue : false,
      board : false,
      owners : owners_,
      expanded : false,
      orgFunds : 0
    }
  },

  refreshOrg : function() {
    var owners_ = [];
    // TODO how to get total number of owners?? presuming ten. perhaps a button
    // to get ten at a time?
    var maxOwners = 10;
    for (let i = 0; i < maxOwners; i++)
      autobiz.ownersRegistered(i, (err, res) => {
        if (err)
          if(err.message.includes("not a base 16"))
            // break
            return {
              shares : 0,
              totalShares : 0,
              dividend : false,
              dilute : false,
              bestow : false,
              modifyCatalogue : false,
              board : false,
              owners : owners_,
              expanded : false,
              orgFunds : 0
            }
          else
            console.error(err);
        owners_.push(res);
      });
    this.setState({owners:owners_});
    this.setState({expanded:false})
  },

  expand : function() {
    autobiz.owners(userAccount, (err, res) => {
      if(err)
        console.error(err)
      if (res) {
        this.setState({shares : res[1]});
        this.setState({dividend : res[2]});
        this.setState({dilute : res[3]});
        this.setState({bestow : res[4]});
        this.setState({modifyCatalogue : res[5]});
        this.setState({board : res[6]});
      }
    });
    autobiz.totalShares( (err, res) => {
      if (err)
        console.error(err);
      this.setState({totalShares : res.c[0]});
    });
    web3.eth.getBalance(autobizAddr, (err, res) => {
      if (err)
        console.error(err);
      this.setState({orgFunds:res});
    })
    this.setState({expanded:true});
  },

  collapse : function() {
    this.setState({expanded:false});
  },

  callDividend : function() {
    autobiz.payDividend(document.getElementById("dividend-amt-input").value, (err, res) => {
      if (err)
        console.error(err);
      alert("Your dividend of " +
        (document.getElementById("dividend-amt-input").value * this.state.shares)
        + " wei is on its way!"
      );
    });
  },

  fundBiz : function() {
    web3.eth.sendTransaction(
      {
        from : userAccount,
        to : autobizAddr,
        value : document.getElementById("org-funding-amt-input").value
      }, function(err, res) {
        if (err)
          console.error(err)
        alert("Your funding is on its way - Metamask will notify you when the tx is confirmed. You will then be able to refresh to see the changes reflected here");
      }
    )
  },

  transfer : function() {
    autobiz.transferShares(
      document.getElementById("transfer-shares-amt-input").value,
      document.getElementById("transfer-shares-addr-input").value,
      function(err, res) {
        if(err)
          console.error(err)
        alert("Your request is on its way!")
      }
    );
  },

  giveUnallocated : function() {
    autobiz.giveUnallocatedShares(
      document.getElementById("give-shares-amt-input").value,
      document.getElementById("give-shares-addr-input").value,
      function(err, res) {
        if(err)
          console.error(err)
        alert("Your request is on its way!")
      }
    );
  },

  dilute : function() {
    autobiz.dilute(
      document.getElementById("dilute-shares-amt-input").value,
      document.getElementById("dilute-shares-addr-input").value,
      function(err, res) {
        if(err)
          console.error(err)
        alert("Your request is on its way!")
      }
    );
  },

  givePermission : function() {
    autobiz.bestowPermission(
      document.getElementById("bestow-permission-addr-input").value,
      document.getElementById("bestow-permission-id-input").value,
      function(err, res) {
        if(err)
          console.error(err)
        alert("Your request is on its way!")
      }
    );
  },

  mapOwners : function(owner, key) {
    // TODO have each addr link to popup with info about their ownership role
    // currently just links to etherscan
    if (owner != "0x")
      return React.createElement("div", {key:key},
        React.createElement("a",
          {
            className:"owner-link",
            href:"https://ropsten.etherscan.io/address/" + owner
          },
          owner
        ),
        React.createElement("br", {})
      );
    return null;
  },

  render : function() {
    var br = React.createElement("br", {});
    /*
    shares : 0,
    totalShares : 0,
    dividend : false,
    dilute : false,
    bestow : false,
    modifyCatalogue : false,
    board : false,
    owners : owners_,
    expanded : false,
    orgFunds : 0
    */
    var giveUS, dilute, bestow = null;
    if (this.state.dilute) {
      giveUS = React.createElement("div", {},
        React.createElement("h5", {}, "Give unallocated shares:"),
        React.createElement("div", {className:"org-mgmt-form"},
          React.createElement("label", {for:"give-shares-amt-input"}, "Amount of shares to give: "),
          React.createElement("input", {type:"number", id:"give-shares-amt-input"}),
          br, br,
          React.createElement("label", {for:"give-shares-addr-input"}, "Address of new owner: "),
          React.createElement("input", {type:"text", id:"give-shares-addr-input"}),
          br, br,
          React.createElement("button", {onClick:this.giveUnallocated}, "Give shares")
        )
      );
      dilute = React.createElement("div", {},
        React.createElement("h5", {}, "Give new shares, diluting current owners' stakes:"),
        React.createElement("div", {className:"org-mgmt-form"},
          React.createElement("label", {for:"dilute-shares-amt-input"}, "Amount of shares to create and give: "),
          React.createElement("input", {type:"number", id:"dilute-shares-amt-input"}),
          br, br,
          React.createElement("label", {for:"dilute-shares-addr-input"}, "Address of new owner: "),
          React.createElement("input", {type:"text", id:"dilute-shares-addr-input"}),
          br, br,
          React.createElement("button", {onClick:this.dilute}, "Create and give shares")
        )
      );
      bestow = React.createElement("div", {},
        React.createElement("h5", {}, "Bestow permissioned roles to a co-owner:"),
        React.createElement("p", {}, "Role IDs are assigned as follows:"),
        React.createElement("ul", {}, "1. can call dividend"),
        React.createElement("ul", {}, "2. can dilute shares"),
        React.createElement("ul", {}, "3. can bestow permissions to others"),
        React.createElement("ul", {}, "4. can modify the catalogue"),
        React.createElement("ul", {}, "5. is a board member"),
        React.createElement("div", {className:"org-mgmt-form"},
          React.createElement("label", {for:"give-permission-id-input"}, "Role ID: "),
          React.createElement("input", {type:"number", id:"give-permission-id-input"}),
          br, br,
          React.createElement("label", {for:"give-permission-addr-input"}, "Address of bestowee: "),
          React.createElement("input", {type:"text", id:"give-permission-addr-input"}),
          br, br,
          React.createElement("button", {onClick:this.givePermission}, "Give permission")
        )
      );
    }
    if (!this.state.expanded)
      return React.createElement("div", {className:"organisation-mgr"},
        React.createElement("h3", null, "Your Organisation"),
        React.createElement("button", {className:"toggle-expand-collapse", onClick:this.expand}, "+")
      );
    var ownership = React.createElement("div", {className:"org-mgmt-section"},
      React.createElement("h4", null, "Ownership and shares"),
      React.createElement("p", null,
          "Your stake: " + this.state.shares + " shares of "
          + this.state.totalShares + " total shares, for a stake of "
          + ((this.state.shares / this.state.totalShares) * 100) + "%"
      ),
      React.createElement("p", {}, "Owners:"),
      this.state.owners.map(this.mapOwners),
      React.createElement("h5", {}, "Transfer your shares:"),
      React.createElement("div", {className:"org-mgmt-form"},
        React.createElement("label", {for:"transfer-shares-amt-input"}, "Amount of shares to transfer: "),
        React.createElement("input", {type:"number", id:"transfer-shares-amt-input"}),
        br, br,
        React.createElement("label", {for:"transfer-shares-addr-input"}, "Address of new owner: "),
        React.createElement("input", {type:"text", id:"transfer-shares-addr-input"}),
        br, br,
        React.createElement("button", {onClick:this.transfer}, "Transfer shares")
      ),
      giveUS,
      dilute,
      bestow
    );
    var orgFundsDiv = React.createElement("div", {className:"org-mgmt-section"},
      React.createElement("h4", null, "Organisation funds"),
      React.createElement("p", null, "Current organisation balance: " + this.state.orgFunds + " wei"),
      React.createElement("h5", {}, "Send funds to the organisation"),
      React.createElement("div", {className:"org-mgmt-form"},
        React.createElement("label", {for:"org-funding-amt-input"}, "Amount to send organisation, in wei: "),
        React.createElement("input", {type:"number", id:"org-funding-amt-input"}),
        br, br,
        React.createElement("button", {onClick:this.fundBiz}, "Send funds")
      )
    );
    var dividendCall = null;
    if (this.state.dividend)
      dividendCall = React.createElement("div", {className:"org-mgmt-section"},
        React.createElement("h4", null, "Dividends"),
        React.createElement("h5", null, "Call for a new dividend"),
        React.createElement("div", {className:"org-mgmt-form"},
          React.createElement("label", {for:"dividend-amt-input"}, "Wei per share: "),
          React.createElement("input", {type:"number", id:"dividend-amt-input"}),
          br, br,
          React.createElement("button", {onClick:this.callDividend}, "Call for a dividend")
        )
      );
    return React.createElement("div", {className:"organisation-mgr"},
      React.createElement("h3", null, "Your Organisation"),
      React.createElement("button", {className:"toggle-expand-collapse", onClick:this.collapse}, "-"),
      React.createElement("div", {className:"org-info-and-actions"},
        ownership, br, br,
        orgFundsDiv, br, br,
        dividendCall
      )
    );
  }

});

function renderNotOwnerError() {
  if (alertXed)
    document.getElementById("workflow-container").innerHTML = "";
  ReactDOM.render(
    React.createElement(Welcome, {}, userAccount),
    document.getElementById("dashboard")
  );
  ReactDOM.render(
    React.createElement(NotOwnerError, {}, "Error"),
    document.getElementById("workflow-container")
  );
};

var NotOwnerError = React.createClass({

  getInitialState : function() {
    return {
      xed:false
    }
  },

  x : function() {
    this.setState({xed:true});
    alertXed = true;
  },

  render : function() {
    if (this.state.xed)
      return React.createElement("div", {});
    var br = React.createElement("br", {});
    var xout = React.createElement("button", {onClick:this.x, className:"popup-x-btn"}, "X");
    var header = React.createElement("h3", {}, this.props.children);
    var shopLink = location.href.replace("biz", "shop");
    if (!shopLink.includes(autobizAddr))
      if (shopLink.includes("?0x"))
        shopLink = shopLink.substring(0, shopLink.indexOf("?")) + "?" + autobizAddr;
      else
        shopLink += "?" + autobizAddr;
    return React.createElement("div", {className:"popup"},
      xout, header,
      React.createElement("h5", {}, "You are not registered as an owner of this autobiz"),
      br,
      React.createElement("p", {}, "If you meant to shop at this autobiz, follow this link: " + shopLink),
      br,
      React.createElement("p", {}, "Or, try re-typing the address of your autobiz - maybe you have the wrong one")
    );
  }
})
